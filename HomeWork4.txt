394. Decode String
class Solution {
    public String decodeString(String s) {
      return decode(s, 0)[0];
    }
    private String[] decode(String s, int index) {
        StringBuilder sb = new StringBuilder();
        int count = 0;
        while (index < s.length()) {
            char c = s.charAt(index);
            if (Character.isDigit(c)) {
                count = count * 10 + (c - '0');
            } else if (c == '[') {
                String[] result = decode(s, index + 1);
                for (int i = 0; i < count; i++) {
                    sb.append(result[0]);
                }
                count = 0;
                index = Integer.parseInt(result[1]);
            } else if (c == ']') {
                return new String[] { sb.toString(), String.valueOf(index) };
            } else {
                sb.append(c);
            }
            index++;
        }
        return new String[] { sb.toString(), String.valueOf(index) };
}
}
509. Fibonacci Number
class Solution {
    public int fib(int n) {
    if (n <= 1) {
        return n;
    }
    return fib(n-1) + fib(n-2);
    }
}
344. Reverse String
class Solution {
    public void reverseString(char[] s) {
       reverse(s, 0, s.length - 1);
    }
    private void reverse(char[] s, int left, int right) {
    if (left >= right) {
        return;
    }
    char temp = s[left];
    s[left] = s[right];
    s[right] = temp;
    reverse(s, left + 1, right - 1);
}
}
326. Power of Three
class Solution {
    public boolean isPowerOfThree(int n) {
    if (n == 1) {
        return true;
    } else if (n <= 0 || n % 3 != 0) {
        return false;
    } else {
        return isPowerOfThree(n / 3);
    }
    }
}
342. Power of Four
class Solution {
    public boolean isPowerOfFour(int n) {
            if (n == 1) {
        return true;
    } else if (n <= 0 || n % 4 != 0) {
        return false;
    } else {
        return isPowerOfFour(n / 4);
    }
    }
}