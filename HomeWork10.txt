706. Design HashMap
class MyHashMap {
    private static final int DEFAULT_CAPACITY = 16;
    private static final float DEFAULT_LOAD_FACTOR = 0.75f;

    private Entry[] table;
    private int size;
    private int capacity;
    private float loadFactor;

    private static class Entry {
        int key;
        int value;
        Entry next;

        Entry(int key, int value) {
            this.key = key;
            this.value = value;
        }
    }

    public MyHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }

    public MyHashMap(int capacity, float loadFactor) {
        if (capacity <= 0) {
            throw new IllegalArgumentException("Invalid capacity: " + capacity);
        }
        if (loadFactor <= 0 || Float.isNaN(loadFactor)) {
            throw new IllegalArgumentException("Invalid load factor: " + loadFactor);
        }
        this.table = new Entry[capacity];
        this.size = 0;
        this.capacity = capacity;
        this.loadFactor = loadFactor;
    }

    public void put(int key, int value) {
        int index = hash(key);
//entry biểu thị một nút trong danh sách liên kết, chứa một cặp khóa-giá trị và một tham chiếu đến nút tiếp theo trong danh sách.
        // tính toán mã băm của khóa
        Entry entry = table[index];
        //Nếu không có mục nhập hiện có với khóa đã cho,một mục nhập mới được thêm vào đầu danh sách liên kết tại chỉ mục đó.
        while (entry != null) {
            if (entry.key == key) {
                entry.value = value;
                return;
            }
            entry = entry.next;
        }
       // Nếu đã có một mục nhập tại chỉ mục đó, phương thức này duyệt danh sách liên kết để tìm một mục nhập hiện có với cùng khóa và cập nhật giá trị của nó
        entry = new Entry(key, value);
        entry.next = table[index];
        table[index] = entry;
        size++;
        //nếu kích thước của bản đồ vượt quá tích của sức chứa và hệ số tải, nó gọi phương thức resize để tăng kích thước của mảng lên gấp đôi và hash lại tất cả các phần tử.
        if (size > loadFactor * capacity) {
            resize();
        }
    }

    public int get(int key) {
        int index = hash(key);
        // tính toán mã băm của khóa
        Entry entry = table[index];
        // Nếu có một mục nhập tại chỉ mục đó, phương thức này duyệt danh sách liên kết để tìm một mục nhập hiện có với cùng khóa và trả về giá trị của nó
        while (entry != null) {
            if (entry.key == key) {
                return entry.value;
            }
            entry = entry.next;
        }
        //Nếu không có mục nhập với khóa đã cho, phương thức trả về -1.
        return -1;
    }

    public void remove(int key) {
        int index = hash(key);
        Entry prev = null;
        Entry entry = table[index];
        // Nếu có một mục nhập tại chỉ mục đó, phương thức này duyệt danh sách liên kết để tìm một mục nhập hiện có với cùng khóa và xóa nó khỏi danh sách
        while (entry != null) {
            if (entry.key == key) {
                if (prev == null) {
                    table[index] = entry.next;
                } else {
                    prev.next = entry.next;
                }
                size--;
                return;
            }
            prev = entry;
            entry = entry.next;
        }
        //Nếu không có mục nhập với khóa đã cho, phương thức không làm gì cả.
    }

    private int hash(int key) {
        return key % capacity;
    }

    private void resize() {
        //tăng kích thước của mảng lên gấp đôi
        capacity *= 2;
        Entry[] oldTable = table;
        table = new Entry[capacity];
        size = 0;
        //tạo một mảng mới với kích thước mới và hash lại tất cả các phần tử từ mảng cũ vào mảng mới.
        for (Entry entry : oldTable) {
            while (entry != null) {
                put(entry.key, entry.value);
                entry = entry.next;
            }
        }
    }
    //độ phức tạp thời gian của các phương thức này là O(n)
}
https://leetcode.com/problems/design-hashmap/submissions/1004514990/

705. Design HashSet
class MyHashSet {

 private int capacity;
    private List<Integer>[] buckets;
    public MyHashSet() {
        this.capacity = 1000;
        this.buckets = new LinkedList[capacity];
        //capacity là kích thước của HashSet, và buckets là một mảng các danh sách liên kết.
    }

    public void add(int key) {
        int hash = key % capacity;
        if (buckets[hash] == null) {
            // thêm giá trị vào đầu danh sách liên kết nếu nó chưa tồn tại.
            buckets[hash] = new LinkedList<>();
        }
        if (!contains(key)) {
            //thêm giá trị vào danh sách liên kết nếu nó đã tồn tại.
            buckets[hash].add(key);
        }
    }

    public void remove(int key) {
        int hash = key % capacity;
        if (buckets[hash] == null) {
            //không có giá trị cần xóa thì return luôn
            return;
        }
        Iterator<Integer> iterator = buckets[hash].iterator();
// truy cập danh sách liên kết tương ứng và xóa giá trị nếu nó tồn tại.
        while (iterator.hasNext()) {
            int val = iterator.next();
            if (val == key) {
                iterator.remove();
                return;
            }
        }
    }

    
    public boolean contains(int key) {
        int hash = key % capacity;
        //truy cập danh sách liên kết tương ứng và kiểm tra xem giá trị có tồn tại trong danh sách hay không.
        if (buckets[hash] == null) {
            // không có là false
            return false;
        }
        for (int val : buckets[hash]) {
            if (val == key) {
            // có là true
                return true;
            }
        }
        return false;
    }
    //độ phức tạp của các phương thức này là O(n)
}
https://leetcode.com/problems/design-hashset/submissions/1004521323/

217. Contains Duplicate
class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashSet<Integer> set = new HashSet<Integer>();
        for (int i = 0; i < nums.length; i++) {
            //1 hashset chứa các giá trị của nums[]
            if (set.contains(nums[i])) {
                //nếu nums[i] đã có trong set thì trả về true
                return true;
            }
            set.add(nums[i]);
        }
        //chạy hết thì trả về false
        return false;
    }
    //Độ phức tạp thời gian của giải thuật này là O(n)
}
https://leetcode.com/problems/contains-duplicate/submissions/1004524249/

1512. Number of Good Pairs
class Solution {
    public int numIdenticalPairs(int[] nums) {
        HashMap<Integer, Integer> count = new HashMap<>();
        int goodPairs = 0; 
        for (int num : nums) {
            if (count.containsKey(num)) {
// sử dụng HashMap để lưu trữ số lần xuất hiện của từng phần tử trong mảng nums
                goodPairs += count.get(num);
// Tổng số cặp tốt sẽ là tổng số cặp được tạo ra từ các phần tử đó.
                count.put(num, count.get(num) + 1);
            } else {
                count.put(num, 1);
            }
        }
        // độ phức tạp là O(n).
        return goodPairs;
    }
}
https://leetcode.com/problems/number-of-good-pairs/submissions/1004948763/

1748. Sum of Unique Elements
class Solution {
    public int sumOfUnique(int[] nums) {
        HashMap<Integer, Integer> count = new HashMap<>();
        int sum = 0;
        
        for (int num : nums) {
//tìm số lượng các phần tử trong mảng mà có cùng giá trị với phần tử hiện tại
            count.put(num, count.getOrDefault(num, 0) + 1);
        }
        
        for (int num : nums) {
// Nếu phần tử đó chỉ xuất hiện một lần, ta sẽ cộng giá trị của nó vào biến tổng
            if (count.get(num) == 1) {
                sum += num;
            }
        }
        //Độ phức tạp là O(n)
        return sum;
    }
}
https://leetcode.com/problems/sum-of-unique-elements/submissions/1004950098/

128. Longest Consecutive Sequence
class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(num);
        }
        //duyệt qua mỗi phần tử của mảng nums và kiểm tra xem phần tử đó có phải là phần tử đầu tiên của một dãy liên tiếp hay không
        int longestStreak = 0;
        for (int num : set) {
            if (!set.contains(num-1)) {
        //kiểm tra xem phần tử đó có phải là phần tử đầu tiên của một dãy liên tiếp hay không
                int currentNum = num;
                int currentStreak = 1;
        //kiểm tra xem các phần tử liên tiếp tiếp theo có tồn tại trong HashSet
                while (set.contains(currentNum+1)) {
        //Nếu có, ta tăng độ dài của dãy liên tiếp lên 1
                    currentNum++;
                    currentStreak++;
                }
                longestStreak = Math.max(longestStreak, currentStreak);
            }
        }
        //trả về dãy dài nhất
        return longestStreak;
        //Độ phức tạp là O(n),
    }
}
https://leetcode.com/problems/longest-consecutive-sequence/submissions/1004952239/

2707. Extra Characters in a String
class Solution {
    public int minExtraChar(String s, String[] dictionary) {
        int n=dictionary.length;
        int dp[]=new int[s.length()+1];
        //mảng dp có độ dài bằng với độ dài của chuỗi s + 1 để tính toán số lượng ký tự dư thừa tối thiểu cần phải cắt bỏ để tạo ra các substring hợp lệ.
        Set<String> set=new HashSet<>();
        for(int i=0;i<n;i++)
        {
            set.add(dictionary[i]);
        }
        for(int i=1;i<=s.length();i++)
        {
            dp[i]=dp[i-1]+1;
            for(int j=0;j<=i;j++)
            {
                String sub=s.substring(j,i);
        //duyệt qua từng vị trí j từ 0 đến i và kiểm tra xem chuỗi con s.substring(j, i) có nằm trong dictionary hay không.
                if(set.contains(sub)){
        //Nếu có, ta cập nhật dp[i] bằng giá trị tối thiểu giữa dp[i] và dp[j]
                    dp[i]=Math.min(dp[i],dp[j]);
                }
            }
        }
        //Độ phức tạp là O(n^2)
        return dp[s.length()];
    }
}
https://leetcode.com/problems/extra-characters-in-a-string/submissions/1004957097/