1. Two Sum
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] sum = new int[2];
        for (int i = 0;i < nums.length;i++){
            for (int j = i+1; j<nums.length;j++){
                if(nums[i] + nums[j]==target){
                 sum[0] = i;
                 sum[1] = j;
                return sum;
                }
            }
        }
        return sum;
    }
}
136. Single Number
class Solution {
    public int singleNumber(int[] nums) {
        int h=0;
        for(int i=0;i<nums.length;i++){
            for (int j=i+1;j<nums.length;j++){
                if(nums[i] == nums[j]){
                    nums[i]=0;
                    nums[j]=0;
                }
            }
        }
        for(int g=0; g< nums.length;g++){
            if(nums[g] != 0){
                return nums[g];
            }
        }
        return h;
    }
}

1480. Running Sum of 1d Array
class Solution {
    public int[] runningSum(int[] nums) {
        int[] sum = new int[nums.length];
        sum[0]=nums[0];
        for(int i =1; i<nums.length;i++){            
            sum[i] = sum[i-1]+nums[i]; 
        }
        return sum;
    }
}
485. Max Consecutive Ones
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int count=0;
        int max =0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==1){
                count++;
                if(count>=max){
                max = count;
            }}
            else if(nums[i]!=1){
                count = 0;
            }
        }
        return max;
    }
}
836. Rectangle Overlap
class Solution {
    public boolean isRectangleOverlap(int[] rec1, int[] rec2) {
        boolean check = true;
        if(rec2[0]>=rec1[2]||rec2[1]>=rec1[3]||rec1[0]>=rec2[2]||rec1[1]>=rec2[3]){
            check = false;    
        }
        else{
            check = true;
           
        }
         return check;
    }
}



169. Majority Element
class Solution {
    public int majorityElement(int[] nums) {
        int count = 0;
        for(int i =0; i<nums.length;i++){
            for(int j = 0; j<nums.length;j++){
                if (nums[i]==nums[j]) count++;                
            }
            if(count>(nums.length)/2) return nums[i];
            else count=0;
        }
        return nums[0];
    }
}

1470. Shuffle the Array
class Solution {
    public int[] shuffle(int[] nums, int n) {
        int[] a1 = new int[nums.length/2];
        int[] a2 = new int[nums.length/2];
        int c=0;
        for (int i = 0;i<(nums.length/2);i++ ){
            a1[i] =  nums[i];
        }
         for (int j = (nums.length/2);j<nums.length;j++ ){            
             a2[c] =  nums[j];
             c++;
           }       
           c=0;   
        for (int h=0;h<nums.length;h+=2){
            nums[h] = a1[c];
            c++;          
        }
           c=0;
        for (int h=1;h<nums.length;h+=2 ){
            nums[h] = a2[c];
            c++;
        }
        return nums;
    }
}




268. Missing Number
class Solution {
    public int missingNumber(int[] nums) {
        Arrays.sort(nums);
        for(int i =0;i<nums.length;i++){
           if(nums[i]==0) {
           for(int j =nums.length-1;j>0;j--){
           if(nums[j]-nums[j-1]!=1){
               return nums[j]-1;
           }
           if((j-1)==0){
               return nums.length;
           }
        }
           }
           else if(i==nums.length-1) return 0;
        }
        if(nums.length==1&&nums[0]==0) return 1;
        else if(nums.length==1&&nums[0]==1) return 0;
        return nums.length;
    }
}
1920. Build Array from Permutation

class Solution {
    public int[] buildArray(int[] nums) {
        int[] ans = new int[nums.length];
        for(int i =0;i<nums.length;i++){
            ans[i] = nums[nums[i]];
        }
        return ans;
    }
}

