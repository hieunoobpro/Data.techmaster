704. Binary Search
class Solution {
    public int search(int[] nums, int target) {
        int start =0;
        int end = nums.length-1;
        while (start <= end) {
            int mid = (start + end) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            } 
        }
        return -1;
    }
}
https://leetcode.com/problems/binary-search/submissions/976775583/
35. Search Insert Position
class Solution {
    public int searchInsert(int[] nums, int target) {
        int start = 0;
        int end = nums.length-1;
        if(target > nums[end]) return nums.length;
        if(target < nums[start]) return 0;
        while (start <= end) {
            int mid = (start + end) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            } 
        }
        return start;
    }
}
https://leetcode.com/problems/search-insert-position/submissions/976775916/
374. Guess Number Higher or Lower
public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int low =1;
        int high=n;
        int ans=0;
        while(low<=high){
            int mid = low+(high-low)/2;
            if(guess(mid)==0){
                return mid;
            }
            else if(guess(mid)==-1){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return -1;
    }
}
https://leetcode.com/problems/guess-number-higher-or-lower/submissions/976776169/
268. Missing Number
class Solution {
    public int missingNumber(int[] nums) {
        Arrays.sort(nums);
        for(int i =0;i<nums.length;i++){
           if(nums[i]==0) {
           for(int j =nums.length-1;j>0;j--){
           if(nums[j]-nums[j-1]!=1){
               return nums[j]-1;
           }
           if((j-1)==0){
               return nums.length;
           }
        }
           }
           else if(i==nums.length-1) return 0;
        }
        if(nums.length==1&&nums[0]==0) return 1;
        else if(nums.length==1&&nums[0]==1) return 0;
        return nums.length;
    }
}
https://leetcode.com/problems/missing-number/submissions/976776494/
1385. Find the Distance Value Between Two Arrays
class Solution {
    public int findTheDistanceValue(int[] arr1, int[] arr2, int d) {
         int ans=0;
        for (int i =0;i<arr1.length;i++){
            for (int j =0;j<arr2.length;j++){
                if (Math.abs(arr1[i]-arr2[j])<=d){
                   ans++;
                   break;
                }
            }
        }
        return (arr1.length-ans);
    }
}
https://leetcode.com/problems/find-the-distance-value-between-two-arrays/submissions/976777214/